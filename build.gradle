task upper doLast {
   String expString = 'TUTORIALS point'
   println "Original: " + expString
   println "Upper case: " + expString.toUpperCase()
}

task count doLast {
   4.times {
      print "$it " 
   }
}

task groovyJDK doLast {
   String myName = "Marc";
   myName.each() { 
      println "${it}" 
   };
}

task propAccess doLast {
    // Using a setter method
    project.buildDir = 'target'
    getProject().setBuildDir('target')

    // Using a getter method
    println project.buildDir
    println getProject().getBuildDir()
}

allprojects {
    task nestedOne {
        doLast {
            println "Nested one! @doLast"
        }

        doFirst {
            println "Nested one! @doFirst"
        }
    }
}

// tasks.create(name: 'hello') doLast {
//    println "tutorialspoint"
// }

// task hello

// println tasks.hello.name
// println tasks['hello'].name

task printAllTaskName doLast {
    tasks.findAll {
        task -> println task.name
    }
}

task taskX doLast {
   println 'taskX'
}
task lib1 doLast {
   println 'lib1'
}
task lib2 doLast {
   println 'lib2'
}
task notALib doLast {
   println 'notALib'
}
taskX.dependsOn lib1, lib2

// task copy(type: Copy) {
//    description 'Copies the resource directory to the target directory.'
//    from 'resources'
//    into 'target'
//    include('**/*.txt', '**/*.xml', '**/*.properties')
//    println("description applied")
//    println(new Date().time)
// }

task eclipse doLast {
   println 'Hello Eclipse'
}

// #1st approach - closure returning true, if the task should be executed, false if not.
eclipse.onlyIf {
   project.hasProperty('usingEclipse')
}

// #2nd approach - alternatively throw an StopExecutionException() like this
eclipse.doFirst {
   if(!usingEclipse) {
      throw new StopExecutionException()
   }
}

task usingEclipse

apply plugin: GreetingPlugin

greeting {
   message = 'Hi'
   greeter = 'Gradle'
}

class GreetingPlugin implements Plugin<Project> {
   void apply(Project project) {
      project.extensions.create("greeting", GreetingPluginExtension)
		
      project.task('hello') doLast {
         println "${project.greeting.message} from ${project.greeting.greeter}"
      }
   }
}

class GreetingPluginExtension {
   String message
   String greeter
}

task task1 doLast {
   println 'compiling source'
}

task task2(dependsOn: task1) doLast {
   println 'compiling unit tests'
}

task task3(dependsOn: [task1, task2]) doLast {
   println 'running unit tests'
}

task task4(dependsOn: [task1, task3]) doLast {
   println 'building the distribution'
}

